stop_for_status(req)
26 req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "4c426f25ad8c317d8f30",
secret = "fe232373c9a92760043d606f2a7debd994fb4c62")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
library(httr)
require(httpuv)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("For Quiz.2", "4c426f25ad8c317d8f30", secret = "fe232373c9a92760043d606f2a7debd994fb4c62")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("For Quiz.2", "4c426f25ad8c317d8f30", secret = "fe232373c9a92760043d606f2a7debd994fb4c62")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
token <- config(token = github_token)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
library(httr)
oauth_endpoints("github")
secret = "fe232373c9a92760043d606f2a7debd994fb4c62")
myapp <- oauth_app("github",
key = "4c426f25ad8c317d8f30",
secret = "fe232373c9a92760043d606f2a7debd994fb4c62")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "4c426f25ad8c317d8f30",
secret = "fe232373c9a92760043d606f2a7debd994fb4c62")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "4c426f25ad8c317d8f30",
secret = "fe232373c9a92760043d606f2a7debd994fb4c62")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
req <- GET("https://api.github.com/rate_limit", gtoken)
26 req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "4c426f25ad8c317d8f30",
secret = "fe232373c9a92760043d606f2a7debd994fb4c62")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
26 req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
26 req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "4c426f25ad8c317d8f30",
secret = "fe232373c9a92760043d606f2a7debd994fb4c62")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "4c426f25ad8c317d8f30",
secret = "fe232373c9a92760043d606f2a7debd994fb4c62")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "4c426f25ad8c317d8f30",
secret = "fe232373c9a92760043d606f2a7debd994fb4c62")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "4c426f25ad8c317d8f30", "fe232373c9a92760043d606f2a7debd994fb4c62")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "4c426f25ad8c317d8f30", "fe232373c9a92760043d606f2a7debd994fb4c62")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "4c426f25ad8c317d8f30", "fe232373c9a92760043d606f2a7debd994fb4c62")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://https://api.github.com/users/jtleek/repos", config(token = github_token))
library(httr)
ibrary(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "4c426f25ad8c317d8f30", "fe232373c9a92760043d606f2a7debd994fb4c62")
##https://github.com/login/oauth/authorize?client_id=e4116562b95b3181af8a&scope=&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&response_type=code
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "4c426f25ad8c317d8f30", "fe232373c9a92760043d606f2a7debd994fb4c62")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "4c426f25ad8c317d8f30", "8c81051278561d5cbe5cd3657ada78c53c88d318")
#Use http://localhost:1410 as the callback url
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "4c426f25ad8c317d8f30", "fe232373c9a92760043d606f2a7debd994fb4c62")
#Use http://localhost:1410 as the callback url
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
22 stop_for_status(req)
library(httr)
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
# Insert your values below - if secret is omitted, it will look it up in the
# GITHUB_CONSUMER_SECRET environmental variable.  Use http://localhost:1410
# as the callback url
myapp <- oauth_app("quiz2", "ddb0d599de51ccd02f4b", secret = "6af1109f6ecf442d292425087d49bb13d9bbe9c8")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
output <- content(req)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "4c426f25ad8c317d8f30", "fe232373c9a92760043d606f2a7debd994fb4c62")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
> library(sqldf)
> library(sqldf)
install.packages("sqldf")
library(httr)
direccion <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
archivo <- "ss06hid.csv"
download.file(direccion, archivo, method="curl")
download.file(direccion, archivo)
data <- read.csv("ss06hid.csv")
logicalvector <- data$ACR==3 & data$AGS==6
first3 <- which(logicalvector)[1:3] # which() treats NAs as FALSE
first3
direccion <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
archivo <- "ss06hid.csv"
download.file(direccion, archivo)
data <- read.csv("ss06hid.csv")
head(data)
library(jpeg)
install.packages("jpeg")
library(jpeg)
direction2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
data2 <- "jeff.jpg"
download.file(direction2, data2)
file <- readJPEG("jeff.jpg", native = TRUE)
foto <- readJPEG("jeff.jpg", native = TRUE)
quantile(foto)
quantile(foto,30,80)
quantile(foto$30)
quantile(foto, probs = c(0.3, 0.8))
library(jpeg)
direction2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
data2 <- "jeff.jpg"
download.file(direction2, data2)
foto <- readJPEG("jeff.jpg", native = TRUE)
quantile(foto, probs = c(0.3, 0.8))
library(data.table)
install.packages("data.table")
direccion3 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
archivo3 <- "GDP.csv"
download.file(direccion3, archivo3)
GDP <- data.table(read.csv("GDP.csv", skip = 4, nrows = 191))
GDP <- data.table(read.csv("GDP.csv", skip = 4, nrows = 191))
library(data.table)
direccion3 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
archivo3 <- "GDP.csv"
download.file(direccion3, archivo3)
GDP <- data.table(read.csv("GDP.csv", skip = 4, nrows = 191))
GDP <- GDP[X != ""]
GDP <- GDP[, list(X, X.1, X.3, X.4)]
setnames(GDP, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP", "Long.Name", "GDP"))
direccion4 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
archivo4 <- "EDSTATS_Country.csv"
download.file(direccion4, archivo4, method="curl")
download.file(direccion4, archivo4)
EDSTATS <- data.table(read.csv("EDSTATS_Country.csv"))
data2 <- merge(GDP, EDSTATS, all = TRUE, by = c("CountryCode"))
sum(!is.na(unique(data2$rankingGDP)))
data2[order(rankingGDP, decreasing = TRUE), list(CountryCode, Long.Name.x, Long.Name.y, rankingGDP, GDP)][13]
data2[, mean(rankingGDP, na.rm = TRUE), by = Income.Group]
breaks <- quantile(data2$rankingGDP, probs = seq(0, 1, 0.2), na.rm = TRUE)
data2$quantileGDP <- cut(data2$rankingGDP, breaks = breaks)
data2[Income.Group == "Lower middle income", .N, by = c("Income.Group", "quantileGDP")]
install.packages("jpeg")
install.packages("jpeg")
library(jpeg)
direccion2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
archivo2 <- "jeff.jpg"
download.file(direccion2, archivo2)
quantile(foto, probs = c(0.3, 0.8))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
file <- file.path(getwd(), "jeff.jpg")
download.file(url, file, mode = "wb")
img <- readJPEG(file, native = TRUE)
quantile(img, probs = c(0.3, 0.8))
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl,destfile="./data/Dataset.zip")
unzip(zipfile="./data/Dataset.zip",exdir="./data")
path_rf <- file.path("./data" , "UCI HAR Dataset")
files<-list.files(path_rf, recursive=TRUE)
files
dataActivityTest  <- read.table(file.path(path_rf, "test" , "Y_test.txt" ),header = FALSE)
dataActivityTrain <- read.table(file.path(path_rf, "train", "Y_train.txt"),header = FALSE)
dataSubjectTrain <- read.table(file.path(path_rf, "train", "subject_train.txt"),header = FALSE)
dataSubjectTest  <- read.table(file.path(path_rf, "test" , "subject_test.txt"),header = FALSE)
dataFeaturesTest  <- read.table(file.path(path_rf, "test" , "X_test.txt" ),header = FALSE)
dataFeaturesTrain <- read.table(file.path(path_rf, "train", "X_train.txt"),header = FALSE)
str(dataActivityTest)
str(dataActivityTrain)
str(dataSubjectTrain)
str(dataSubjectTest)
str(dataFeaturesTest)
str(dataFeaturesTrain)
#1.  Merges the training and the test sets to create one data set.
dataSubject <- rbind(dataSubjectTrain, dataSubjectTest)
dataActivity<- rbind(dataActivityTrain, dataActivityTest)
dataFeatures<- rbind(dataFeaturesTrain, dataFeaturesTest)
names(dataSubject)<-c("subject")
names(dataActivity)<- c("activity")
dataFeaturesNames <- read.table(file.path(path_rf, "features.txt"),head=FALSE)
names(dataFeatures)<- dataFeaturesNames$V2
dataCombine <- cbind(dataSubject, dataActivity)
Data <- cbind(dataFeatures, dataCombine)
#2.  Extracts only the measurements on the mean and standard deviation for each measurement.
subdataFeaturesNames<-dataFeaturesNames$V2[grep("mean\\(\\)|std\\(\\)", dataFeaturesNames$V2)]
selectedNames<-c(as.character(subdataFeaturesNames), "subject", "activity" )
Data<-subset(Data,select=selectedNames)
str(Data)
#3.  Uses descriptive activity names to name the activities in the data set
activityLabels <- read.table(file.path(path_rf, "activity_labels.txt"),header = FALSE)
head(Data$activity,30)
#4.  Appropriately labels the data set with descriptive variable
names(Data)<-gsub("^t", "time", names(Data))
names(Data)<-gsub("^f", "frequency", names(Data))
names(Data)<-gsub("Acc", "Accelerometer", names(Data))
names(Data)<-gsub("Gyro", "Gyroscope", names(Data))
names(Data)<-gsub("Mag", "Magnitude", names(Data))
names(Data)<-gsub("BodyBody", "Body", names(Data))
names(Data)
#5.  From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
library(plyr)
Data2<-aggregate(. ~subject + activity, Data, mean)
Data2<-Data2[order(Data2$subject,Data2$activity),]
write.table(Data2, file = "tidydata.txt",row.name=FALSE)
Y<-write.table(Data2, file = "tidydata.txt",row.name=FALSE)
Y
#Prouduce Codebook
library(knitr)
knit2html("codebook.Rmd")
library(dplyr)
if(!file.exists("./data")){dir.create("./data")}
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FPUMSDataDict06.pdf"
if(!file.exists("./data/housing_idaho.csv")){download.file(fileUrl1,destfile="./data/housing_idaho.csv")}
if(!file.exists("./data/cookbook.pdf")){download.file(fileUrl2,destfile="./data/cookbook.pdf")}
housingdata <- read.csv("./data/housing_idaho.csv")
list <-strsplit(names(housingdata),split="wgtp")
list[[123]]
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
if(!file.exists("./data/gdp.csv")){download.file(fileUrl1,destfile="./data/gdp.csv"}
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
if(!file.exists("./data/gdp.csv")){download.file(fileUrl1,destfile="./data/gdp.csv")}
data <- read.csv("./data/gdp.csv",skip=4, nrows=190)
cleanedData <- gsub(",","",data$X.4)
cleanedData <- (as.numeric(cleanedData))
mean(cleanedData,na.rm = TRUE)
countryNames <- data$X.3
length(grep("^United",countryNames))
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
if(!file.exists("./data/gdpdata.csv")){download.file(fileUrl1,destfile="./data/gdpdata.csv")}
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
if(!file.exists("./data/educationaldata.csv")){download.file(fileUrl1,destfile="./data/educationaldata.csv",method="curl")}
gdpdata <- read.csv("./data/gdpdata.csv",skip=4,nrows=190)
educationaldata <- read.csv("./data/educationaldata.csv")
mergedData <- merge(gdpdata,educationaldata,by.x="X", by.y="CountryCode")
fy.june <- grep('Fiscal year end: June', mergedData$Special.Notes)
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
library(swirl)
ls()
library(swirl)
swirl
library(swirl)
library(swirl)
ls()
rm(list=ls())
swirl
swirl()
students
?gather
gather(students,sex,count,-grade)
student2
students2
res.<-gather(sex_class,value)
res.<-gather(sex_class,count)
res <- gather(students2, sex_class, count, -grade)
res
?seperate()
?seperate
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students2 %>%
gather( students2, sex_class, count, -grade) %>%
separate( sex_class, c("sex", "class")) %>%
print
submit()
students2 %>%
gather(students2, sex_class, count, -grade) %>%
separate(sex_class, c("sex", "class")) %>%
print
submit()
reset()
swirl()
library(swirl)
rm(list=ls())
swirl()
3
bye()
bye()
exit()
swirl()
mydf<-read.csv(path2csv,stringAsFactors=FALSE)
?read.csv
mydf<-read.csv(path2csv)
mydf<-read.csv(path2csv,StringsAsFactors=FALSE)
mydf<-read.csv(path2csv,stringsAsFactors=FALSE)
dim()
dim(path2csv)
dim(mydf)
head(df)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?select
select(cran,ip-id,package,country)
select(cran,ip_id,package,country)
packageVersion("dplyr")
5:20
library(ggplot)
library(ggplot2)
install.packages("ggplot2")
example(points)
insatll.packages("swirl")
install.packages("swirl")
install_from_swirl("Exploratory Data Analysis")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
library(ggplot2)
str(mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,color=drv)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"))
qplot(displ,hwy,data=mpg,fill=drv)
qplot(hwy,data=mpg,fill=drv)
qplot(displ,hwy,data=mpg,faccets=.~drv)
qplot(displ,hwy,data=mpg,facets=.~drv)
qplot(displ,hwy,data=mpg,facets=drv.~,binwidth=2)
qplot(hwy,data=mpg,facets=drv.~,binwidth=2)
qplot(hwy,data=mpg,facets=drv~.,binwidth=2)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
str(lattice)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
library(datasets)
data(airquality)
library(datasets)
data(airquality)
library(datasets)
library(datasets)
install.packages("RColorBrewer")
get(options"repos")
setwd("C:/Users/rnair1/Desktop")
##Read data
activitydata<-read.csv("activity.csv")
head(activitydata)
colnames(activitydata)
##What is mean total number of steps taken per day?
Totalsteps_day<-aggregate(steps~date, data=activitydata, sum)
hist(Totalsteps_day$steps, col="blue", main="Total steps per day", xlab="day")
mean(Totalsteps_day$steps)
median(Totalsteps_day$steps)
##What is the average daily activity pattern?
Avgdailyactv<-tapply(activitydata$steps,activitydata$interval,mean,na.rm=TRUE)
plot(x=names(Avgdailyactv),y=Avgdailyactv, type = "l", xlab = "5-min interval",
ylab = "Average number of steps taken", main = "Average daily activity pattern",
col = "blue")
##Imputing missing values
##1.	Calculate and report the total number of missing values in the dataset
Avgdailyactv[Avgdailyactv==max(Avgdailyactv)]
activitydata_missing<-sum(is.na(activitydata))
activitydata_missing
##filling in all of the missing values in the dataset used: the mean for that 5-minute interval
Totalsteps_interval <- aggregate(steps ~ interval, data = activitydata, FUN = mean)
for (i in 1:nrow(activitydata)) {
value <- activitydata[i, ]
if (is.na(value$steps)) {
steps <- subset(Totalsteps_interval, interval == value$interval)$steps
} else {
steps <- value$steps
}
}
Totalsteps_day_NA.rm<- aggregate(steps ~ date, activitydata, sum)
View(Totalsteps_interval)
# Draw a histogram of the value
hist(Totalsteps_day_NA.rm$steps, main = "Total number of steps taken each day(NA removed)", xlab = "day")
mean(Totalsteps_day_NA.rm$steps)
median(Totalsteps_day_NA.rm$steps)
day<-weekdays(activitydata$date)
day<-weekdays(activitydata,date)
day<-weekdays(activitydata,date)
day<-weekdays(activitydata$date, abbreviate(FALSE))
day<-activitydata$date
days<-weekdays(day, abbreviate(FALSE))
day <- weekdays(activitydata_missing$date)
day <- weekdays(activitydata$date)
daytype <- function(date) {
if (weekdays(as.Date(date)) %in% c("Saturday", "Sunday")) {
"weekend"
} else {
"weekday"
}
}
activitydata_missing$daytype <- as.factor(sapply(activitydata_missing$date, daytype))
Totalsteps_day_NA.rm$daytype <- as.factor(sapply(activitydata_missing$date, daytype))
Totalsteps_day_NA.rm$daytype <- as.factor(sapply(Totalsteps_day_NA.rm$date, daytype))
#load the ggplot library
library(ggplot2)
steps_per_day_na.rm <- aggregate(steps ~ interval+ daytype,data=Totalsteps_day_NA.rm, mean)
steps_per_day_na.rm <- aggregate(steps ~daytype,data=Totalsteps_day_NA.rm, mean)
ggplot(steps_per_day_na.rm, aes(interval, steps)) + geom_line() + facet_grid(daytype ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
ggplot(steps_per_day_na.rm, aes(daytype, steps)) + geom_line() + facet_grid(daytype ~ .) +
ggplot(steps_per_day_na.rm, aes(daytype, steps)) + geom_line() + facet_grid(daytype ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
ggplot(steps_per_day_na.rm, aes(daytype, steps)) + geom_line() + facet_grid(daytype ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
activitydata$daytype <- as.factor(sapply(activitydata$date, daytype))
steps_per_day_na.rm <- aggregate(steps ~ interval +daytype,data=Totalsteps_day_NA.rm, mean)
steps_per_day_na.rm <- aggregate(steps ~ interval +daytype,data=activitydata, mean)
ggplot(steps_per_day_na.rm, aes(interval, steps)) + geom_line() + facet_grid(daytype ~ .) +
ggplot(steps_per_day_na.rm, aes(interval, steps)) + geom_line() + facet_grid(daytype ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
ggplot(steps_per_day_na.rm, aes(interval, steps)) + geom_line() + facet_grid(daytype ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
setwd("C:/Users/rnair1/Desktop")
ggplot(steps_per_day_na.rm, aes(interval, steps)) + geom_line() + facet_grid(daytype ~ color=daytype,) +
xlab("5-minute interval") + ylab("Number of steps")
library(ggplot2)
steps_per_day_na.rm <- aggregate(steps ~ interval+daytype, activitydata, mean)
ggplot(steps_per_day_na.rm, aes(interval, steps)) + geom_line() + facet_grid(daytype ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
```
ggplot(steps_per_day_na.rm, aes(interval, steps)) + geom_line() + facet_grid(daytype ~ .,color=daytype) +
ggplot(steps_per_day_na.rm, aes(interval, steps)) + geom_line() + facet_grid(daytype ~ .,color=daytype) +
xlab("5-minute interval") + ylab("Number of steps")
install.packages("RColorBrewer")
ggplot(steps_per_day_na.rm, aes(interval, steps)) + geom_line(aes(color = daytype)) + facet_grid(daytype ~ .,color=daytype) +
xlab("5-minute interval") + ylab("Number of steps")
ggplot(steps_per_day_na.rm, aes(interval, steps)) + geom_line(aes(color = daytype)) + facet_grid(daytype ~ .) +
ggplot(steps_per_day_na.rm, aes(interval, steps)) + geom_line(aes(color = daytype)) + facet_grid(daytype ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
ggplot(steps_per_day_na.rm, aes(interval, steps)) + geom_line(aes(color = daytype)) + facet_grid(daytype ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
